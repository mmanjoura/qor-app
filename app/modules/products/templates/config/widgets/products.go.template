package widgets

import (
	"fmt"
	qor_admin "github.com/qor/admin"
	"{{package_path}}/app/models"
	"{{package_path}}/config/admin"
	"{{package_path}}/db"
	"github.com/qor/qor"
	"github.com/qor/widget"
)

func init() {
	Widget := GetWidget()

	// Feature Products
	type selectedProductsListArgument struct {
		Products []string
	}
	selectedProductsListResouce := admin.Admin.NewResource(&selectedProductsListArgument{})
	selectedProductsListResouce.Meta(&qor_admin.Meta{Name: "Products", Type: "select_many", Collection: func(value interface{}, context *qor.Context) [][]string {
		var collectionValues [][]string
		var products []*models.Product
		db.DB.Find(&products)
		for _, product := range products {
			collectionValues = append(collectionValues, []string{fmt.Sprintf("%v", product.ID), product.Name})
		}
		return collectionValues
	}})
	Widget.RegisterWidget(&widget.Widget{
		Name:     "Products",
		Template: "products",
		Setting:  selectedProductsListResouce,
		Context: func(context *widget.Context, setting interface{}) *widget.Context {
			if setting != nil {
				var products []*models.Product
				db.DB.Limit(9).Preload("ColorVariations").Preload("ColorVariations.Images").Where("id IN (?)", setting.(*selectedProductsListArgument).Products).Find(&products)
				context.Options["Products"] = products
			}
			return context
		},
	})
}
